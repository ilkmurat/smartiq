package com.murat.smartiq.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import com.murat.smartiq.model.Product;
import com.murat.smartiq.repository.IProductRepository;
import com.murat.smartiq.service.IProductInstanceService;

@RestController
public class ProductController implements IProductInstanceService {

	@Autowired
	IProductRepository productRepo;

	@Override
	public ResponseEntity<Void> addProduct(Product product) {
		productRepo.save(product);
		return new ResponseEntity<Void>(HttpStatus.OK);
	}

	@Override
	public ResponseEntity<Void> updateProduct(Product product) {
		Optional<Product> prod = productRepo.findById(product.getProductId());
		if (prod != null) {
			prod.get().setProductName(product.getProductName());
			productRepo.save(prod.get());
			return new ResponseEntity<Void>(HttpStatus.OK);
		}
		return new ResponseEntity<Void>(HttpStatus.NOT_MODIFIED);
	}

	@Override
	public ResponseEntity<Product> removeProduct(@PathVariable("productId") String productId) {
		Optional<Product> product = productRepo.findById(productId);
		if (product != null) {
			productRepo.deleteById(product.get().getProductId());
			return new ResponseEntity<Product>(HttpStatus.NO_CONTENT);
		}

		return new ResponseEntity<Product>(HttpStatus.NOT_FOUND);
	}

	@Override
	public List<Product> allProducts() {
		return productRepo.findAll();
	}

	@Override
	public ResponseEntity<Product> getProductById(@PathVariable("productId") String productId) {
		return productRepo.findById(productId).map(product -> ResponseEntity.ok().body(product))
				.orElse(ResponseEntity.notFound().build());
	}

	@Override
	public ResponseEntity<Void> updateProductStock(Product product) {
		Optional<Product> productStock = productRepo.findById(product.getProductId());
		if (productStock != null) {
			productStock.get().setStockCount(product.getStockCount());
			productRepo.save(productStock.get());
			return new ResponseEntity<Void>(HttpStatus.OK);
		}
		return new ResponseEntity<Void>(HttpStatus.NOT_MODIFIED);
	}
	
	@Override
	public ResponseEntity<Void> incrementProductStock(Product product) {
		Optional<Product> productStock = productRepo.findById(product.getProductId());
		if (productStock != null) {
			int totalStock = productStock.get().getStockCount() + product.getStockCount();
			productStock.get().setStockCount(totalStock);
			productRepo.save(productStock.get());
			return new ResponseEntity<Void>(HttpStatus.OK);
		}
		return new ResponseEntity<Void>(HttpStatus.NOT_MODIFIED);
	}
	
	public ResponseEntity<Void> incrementProductStock2(String product) {
		Optional<Product> productStock = productRepo.findById(product.getProductId());
		if (productStock != null) {
			int totalStock = productStock.get().getStockCount() + product.getStockCount();
			productStock.get().setStockCount(totalStock);
			productRepo.save(productStock.get());
			return new ResponseEntity<Void>(HttpStatus.OK);
		}
		return new ResponseEntity<Void>(HttpStatus.NOT_MODIFIED);
	}
	
	
	
	@Override
	public ResponseEntity<Void> decrementProductStock(Product product) {
		Optional<Product> productStock = productRepo.findById(product.getProductId());
		if (productStock != null) {
			int totalStock = productStock.get().getStockCount() - product.getStockCount();
			if (totalStock >= 0) {
				productStock.get().setStockCount(totalStock);
				productRepo.save(productStock.get());
				return new ResponseEntity<Void>(HttpStatus.OK);
			} else {
				return new ResponseEntity<Void>(HttpStatus.INSUFFICIENT_STORAGE);
			}
		}
		return new ResponseEntity<Void>(HttpStatus.NOT_MODIFIED);
	}

	@Override
	public List<Product> getProductsOfCategory(@PathVariable("categoryId") String categoryId) {
		List<Product> products = productRepo.getProductsByCategoryId(categoryId);
		if (products != null) {
			return products;
		}

		return null;
		// .map(product -> ResponseEntity.ok().body(product))
		// .orElse(ResponseEntity.notFound().build());
	}

}
