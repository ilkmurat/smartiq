package com.murat.smartiq.controller;

import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import com.murat.smartiq.model.Category;
import com.murat.smartiq.repository.ICategoryRepository;
import com.murat.smartiq.service.ICategoryService;
import com.murat.smartiq.util.SmartIqUtils;

@RestController
public class CategoryController implements ICategoryService {

	@Autowired
	ICategoryRepository categoryRepo;

	/**
	 * creating new category
	 */
	@Override
	public ResponseEntity addCategory(Category category) {
		try {
			if (category == null || category.getCategoryName() == null || category.getShortCode() == null) {
				return new ResponseEntity<>(
						SmartIqUtils.errorResponse("Category not created Empty", "Please provide name and short code"),
						HttpStatus.NOT_FOUND);
			}
			category.setCreateDate(new Date());
			categoryRepo.save(category);
			return new ResponseEntity<Void>(HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(SmartIqUtils.errorResponse("Service Exception", e.getMessage()),
					HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	/**
	 * update exist category
	 */
	@Override
	public ResponseEntity<Void> updateCategory(Category category) {
		Optional<Category> cat = categoryRepo.findById(category.getCategoryId());
		if (cat != null) {
			cat.get().setCategoryName(category.getCategoryName());
			cat.get().setShortCode(category.getShortCode());
			categoryRepo.save(cat.get());
			return new ResponseEntity<Void>(HttpStatus.OK);
		}
		return new ResponseEntity<>(
				SmartIqUtils.errorResponse("Category not created Empty", "Please provide name and short code"),
				HttpStatus.NOT_FOUND);
	}

	@Override
	public ResponseEntity<Category> removeCategory(@PathVariable("shortCode") String shortCode) {
		List<Category> category = categoryRepo.getCategoryByShortCode(shortCode);
		if (category != null) {
			categoryRepo.deleteById(category.get(0).getCategoryId());
			return new ResponseEntity<Category>(HttpStatus.NO_CONTENT);
		}

		return new ResponseEntity<Category>(HttpStatus.NOT_FOUND);

	}

	@Override
	public List<Category> allCategories() {
		return categoryRepo.findAll();
	}

	@Override
	public ResponseEntity<Category> getCategoryById(@PathVariable("categoryId") String categoryId) {
		return categoryRepo.findById(categoryId).map(category -> ResponseEntity.ok().body(category))
				.orElse(ResponseEntity.notFound().build());
	}

}
