package com.murat.smartiq.controller;

import java.net.URI;
import java.net.http.HttpRequest;
import java.util.List;
import java.util.Random;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.murat.smartiq.model.OrderItem;
import com.murat.smartiq.repository.IOrderRepository;
import com.murat.smartiq.service.IOrderService;

@RestController
public class OrderController implements IOrderService {

	@Autowired
	IOrderRepository orderRepo;

	private static final String serviceURL = "http://localhost:8081/product/";

	@Override
	public ResponseEntity<Void> placeOrder(List<OrderItem> itemList) {
		Random random = new Random();
		int orderId = random.nextInt(999999);
		for (OrderItem item : itemList) {
			item.setOrderId(orderId);
			item.setStatus("WAITING");
			orderRepo.save(item);
			decrementStock(item);
		}
		return new ResponseEntity<Void>(HttpStatus.OK);
	}

	@Override
	public ResponseEntity<Void> updateAddress(@RequestBody OrderItem item) {
		List<OrderItem> orderAddress = orderRepo.getOrderItemsByOrderId(item.getOrderId());
		if (orderAddress != null && orderAddress.size() > 0) {
			for (OrderItem orderItem : orderAddress) {
				orderItem.setAddress(item.getAddress());
				orderRepo.save(orderItem);
			}
			return new ResponseEntity<Void>(HttpStatus.OK);
		}
		return new ResponseEntity<Void>(HttpStatus.NOT_MODIFIED);
	}

	@Override
	public ResponseEntity<Void> cancelOrder(@PathVariable("orderId") Integer orderId) {
		List<OrderItem> orderItems = orderRepo.getOrderItemsByOrderId(orderId);
		if (orderItems != null && orderItems.size() > 0) {
			for (OrderItem orderItem : orderItems) {
				orderItem.setStatus("CANCELED");
				orderRepo.save(orderItem);
				incrementStock(orderItem);
			}
			return new ResponseEntity<Void>(HttpStatus.OK);
		}
		return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
	}

	@Override
	public List<OrderItem> allOrders() {
		// maybe return Map OrderId -- OrderItem
		return orderRepo.findAll();
	}

	@Override
	public List<OrderItem> getOrderItemsByOrderId(@PathVariable("orderId") Integer orderId) {
		List<OrderItem> orderItems = orderRepo.getOrderItemsByOrderId(orderId);

		if (orderItems != null && orderItems.size() > 0) {
			return orderItems;
		}
		return null;
		// .map(product -> ResponseEntity.ok().body(product))
		// .orElse(ResponseEntity.notFound().build());
	}

	@Override
	public void successCallback(@PathVariable("orderId") Integer orderId) {
		List<OrderItem> orderItems = orderRepo.getOrderItemsByOrderId(orderId);
		for (OrderItem item : orderItems) {
			item.setStatus("FINISHED");
			orderRepo.save(item);
		}

	}

	@Override
	public void faultCallback(@PathVariable("orderId") Integer orderId) {
		List<OrderItem> orderItems = orderRepo.getOrderItemsByOrderId(orderId);
		for (OrderItem item : orderItems) {
			item.setStatus("CANCELLED");
			orderRepo.save(item);
		}
	}

	private String incrementStock(OrderItem item) {
		JSONObject product = new JSONObject();
		product.put("productId", item.getProductId());
		product.put("count", item.getTotalCount());

		String inputJson = product.toString();
		HttpRequest.newBuilder(URI.create(serviceURL + "incrementProductStock"))
				.header("Content-Type", "application/json")
				.POST(HttpRequest.BodyPublishers.ofString(inputJson)).build();

		return null;
	}
	
	private String decrementStock(OrderItem item) {
		JSONObject product = new JSONObject();
		product.put("productId", item.getProductId());
		product.put("count", item.getTotalCount());

		String inputJson = product.toString();
		HttpRequest.newBuilder(URI.create(serviceURL + "decrementProductStock"))
				.header("Content-Type", "application/json")
				.POST(HttpRequest.BodyPublishers.ofString(inputJson)).build();

		return null;
	}

	/*
	 * public ResponseEntity<OrderItem> removeCart(@PathVariable("orderItemId")
	 * String orderItemId) {
	 * 
	 * Optional<OrderItem> item = orderRepo.findById(orderItemId); if (item == null)
	 * { return new ResponseEntity<OrderItem>(HttpStatus.NOT_FOUND); }
	 * 
	 * orderRepo.deleteById(orderItemId); return new
	 * ResponseEntity<OrderItem>(HttpStatus.NO_CONTENT); }
	 */

}
