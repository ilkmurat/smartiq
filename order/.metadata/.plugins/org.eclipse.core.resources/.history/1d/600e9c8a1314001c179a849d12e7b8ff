package com.murat.smartiq.controller;

import java.net.URI;
import java.net.http.HttpRequest;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import com.murat.smartiq.model.Product;
import com.murat.smartiq.repository.IProductRepository;
import com.murat.smartiq.service.IProductInstanceService;

import org.json.JSONArray;
import org.json.JSONObject;

@RestController
public class ProductController implements IProductInstanceService {

	@Autowired
	IProductRepository productRepo;

	private static final String serviceURL = "http://localhost:8082/order/";

	@Override
	public ResponseEntity<Void> addProduct(Product product) {
		productRepo.save(product);
		return new ResponseEntity<Void>(HttpStatus.OK);
	}

	@Override
	public ResponseEntity<Void> updateProduct(Product product) {
		Optional<Product> prod = productRepo.findById(product.getProductId());
		if (prod != null) {
			prod.get().setProductName(product.getProductName());
			productRepo.save(prod.get());
			return new ResponseEntity<Void>(HttpStatus.OK);
		}
		return new ResponseEntity<Void>(HttpStatus.NOT_MODIFIED);
	}

	@Override
	public ResponseEntity<Product> removeProduct(@PathVariable("productId") String productId) {
		Optional<Product> product = productRepo.findById(productId);
		if (product != null) {
			productRepo.deleteById(product.get().getProductId());
			return new ResponseEntity<Product>(HttpStatus.NO_CONTENT);
		}

		return new ResponseEntity<Product>(HttpStatus.NOT_FOUND);
	}

	@Override
	public List<Product> allProducts() {
		return productRepo.findAll();
	}

	@Override
	public ResponseEntity<Product> getProductById(@PathVariable("productId") String productId) {
		return productRepo.findById(productId).map(product -> ResponseEntity.ok().body(product))
				.orElse(ResponseEntity.notFound().build());
	}

	@Override
	public ResponseEntity<Void> updateProductStock(Product product) {
		Optional<Product> productStock = productRepo.findById(product.getProductId());
		if (productStock != null) {
			productStock.get().setStockCount(product.getStockCount());
			productRepo.save(productStock.get());
			return new ResponseEntity<Void>(HttpStatus.OK);
		}
		return new ResponseEntity<Void>(HttpStatus.NOT_MODIFIED);
	}

	@Override
	public ResponseEntity<Void> incrementProductStock(String product) {
		JSONObject request = new JSONObject(product);
		String productId = request.optString("productId");
		int soldCount = request.optInt("count");
		Optional<Product> productStock = productRepo.findById(productId);
		if (productStock != null) {
			int totalStock = productStock.get().getStockCount() + soldCount;
			productStock.get().setStockCount(totalStock);
			productRepo.save(productStock.get());
			// callback
			return new ResponseEntity<Void>(HttpStatus.OK);
		}
		return new ResponseEntity<Void>(HttpStatus.NOT_MODIFIED);
	}

	@Override
	public ResponseEntity<Void> decrementProductStock(String productList) {
		List<Product> prodList = new ArrayList<>();
		Integer orderId = null;
		JSONArray array = new JSONArray(productList);
		for (int i = 0; i < array.length(); ++i) {
			JSONObject request = array.getJSONObject(i);
			String productId = request.optString("productId");
			int soldCount = request.optInt("count");
			orderId = request.optInt("orderId");
			Optional<Product> productStock = productRepo.findById(productId);
			if (productStock != null) {
				int totalStock = productStock.get().getStockCount() - soldCount;
				productStock.get().setStockCount(totalStock);
				prodList.add(productStock.get());
			}

		}
		productRepo.saveAll(prodList);
		return new ResponseEntity<Void>(HttpStatus.OK);
	}

	@Override
	public List<Product> getProductsOfCategory(@PathVariable("categoryId") String categoryId) {
		List<Product> products = productRepo.getProductsByCategoryId(categoryId);
		if (products != null) {
			return products;
		}

		return null;
		// .map(product -> ResponseEntity.ok().body(product))
		// .orElse(ResponseEntity.notFound().build());
	}

/**	private String faultCallback(Integer orderId) {
		HttpRequest req = HttpRequest.newBuilder(URI.create(serviceURL + "faultCallback/" + orderId)).GET().build();

		return null;
	}

	private String successCallback(Integer orderId) {
		HttpRequest req = HttpRequest.newBuilder(URI.create(serviceURL + "successCallback/" + orderId)).GET().build();

		return null;
	}*/

}
